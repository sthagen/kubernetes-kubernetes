/*
Copyright 2024 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// To regenerate api.pb.go run `hack/update-codegen.sh protobindings`

syntax = "proto3";

package v1beta1;
option go_package = "k8s.io/kubelet/pkg/apis/dra/v1beta1";

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "k8s.io/kubelet/pkg/apis/dra/v1alpha4/api.proto";

option (gogoproto.goproto_stringer_all) = false;
option (gogoproto.stringer_all) =  true;
option (gogoproto.goproto_getters_all) = true;
option (gogoproto.marshaler_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.goproto_unrecognized_all) = false;

// The v1beta1 DRAPlugin service has the exact same methods as the Node
// service in the previous alpha, so gRPC serves can provide both
// services with the same implementation.
service DRAPlugin {
  // NodePrepareResources prepares several ResourceClaims
  // for use on the node. If an error is returned, the
  // response is ignored. Failures for individual claims
  // can be reported inside NodePrepareResourcesResponse.
  rpc NodePrepareResources (v1alpha3.NodePrepareResourcesRequest)
    returns (v1alpha3.NodePrepareResourcesResponse) {}

  // NodeUnprepareResources is the opposite of NodePrepareResources.
  // The same error handling rules apply,
  rpc NodeUnprepareResources (v1alpha3.NodeUnprepareResourcesRequest)
    returns (v1alpha3.NodeUnprepareResourcesResponse) {}
}
